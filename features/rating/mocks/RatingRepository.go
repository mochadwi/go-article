// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "github.com/mochadwi/go-article/models"

// RatingRepository is an autogenerated mock type for the RatingRepository type
type RatingRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, a
func (_m *RatingRepository) Create(ctx context.Context, a *models.Rating) (int64, error) {
	ret := _m.Called(ctx, a)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *models.Rating) int64); ok {
		r0 = rf(ctx, a)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Rating) error); ok {
		r1 = rf(ctx, a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, lessonId
func (_m *RatingRepository) GetByID(ctx context.Context, lessonId int64) (*models.Rating, error) {
	ret := _m.Called(ctx, lessonId)

	var r0 *models.Rating
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Rating); ok {
		r0 = rf(ctx, lessonId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Rating)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, lessonId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
